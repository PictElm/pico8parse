while                                   -- FAIL
while do                                -- FAIL
while =                                 -- FAIL
while 1 do                              -- FAIL
while 1 do end
while 1 do local a end
while 1 do local a local b end
while 1 do local a; local b; end
while 1 do 2 end                        -- FAIL
while 1 do "foo" end                    -- FAIL
while true do end
while 1 do ; end                        -- FAIL
while 1 do while                        -- FAIL
while 1 end                             -- FAIL
while 1 2 do                            -- FAIL
while 1 = 2 do                          -- FAIL
while 1 do return end
while 1 do return return end            -- FAIL
while 1 do do end end
while 1 do do return end end
while 1 do break end
while 1 do break break end              -- FAIL
while 1 do do break end end
// { "luaVersion": "5.2" }
while 1 do ; end
while 1 do break break end

// { "luaVersion": "PICO-8-0.2.1", "ignoreStrictP8FileFormat": true }
// singleLineWhile
//// only the basic tests, for more advanced see the singleLineIf
//// as they essentially are implemented using the same algorithm
//// (in the ./conditional)
while (1)@n@                            -- FAIL
while (1);@n@                           -- FAIL
while (1) local a = 1@n@
while (1) local a = 1
while (1) do end
while (1) do@n@end
while (1)@n@do@n@end
function f()while (1) local a = 1 end   -- FAIL
function f()while (1) local a = 1@n@end -- FAIL
function f() while (1) local a = 1@n@end
while (1) end@n@                        -- FAIL
//// bonus challenge!
//while (1) while (2) do end            -- FAIL
//while (1) if (2) then end

// { "luaVersion": "PICO-8-0.2.3", "ignoreStrictP8FileFormat": true }
// allowEmptySingleLineWhile
while (1)@n@                            -- FAIL
while (1);@n@
while (1);@n@local a = 1
